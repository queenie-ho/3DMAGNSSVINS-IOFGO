# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GnssGloEphemMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_comm.msg

class GnssGloEphemMsg(genpy.Message):
  _md5sum = "6893dee0d8b1c9325a6693f3488e0144"
  _type = "gnss_comm/GnssGloEphemMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message contains GLONASS ephemeris data

uint32 sat
GnssTimeMsg ttr
GnssTimeMsg toe
int32  freqo
uint32 iode
uint32 health
uint32 age
float64 ura
float64 pos_x
float64 pos_y
float64 pos_z
float64 vel_x
float64 vel_y
float64 vel_z
float64 acc_x
float64 acc_y
float64 acc_z
float64 tau_n
float64 gamma
float64 delta_tau_n
================================================================================
MSG: gnss_comm/GnssTimeMsg
# This message contains GNSS time expressed in the form of 
# GNSS week number and time of week(in seconds)

uint32 week
float64 tow"""
  __slots__ = ['sat','ttr','toe','freqo','iode','health','age','ura','pos_x','pos_y','pos_z','vel_x','vel_y','vel_z','acc_x','acc_y','acc_z','tau_n','gamma','delta_tau_n']
  _slot_types = ['uint32','gnss_comm/GnssTimeMsg','gnss_comm/GnssTimeMsg','int32','uint32','uint32','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sat,ttr,toe,freqo,iode,health,age,ura,pos_x,pos_y,pos_z,vel_x,vel_y,vel_z,acc_x,acc_y,acc_z,tau_n,gamma,delta_tau_n

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssGloEphemMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sat is None:
        self.sat = 0
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      if self.freqo is None:
        self.freqo = 0
      if self.iode is None:
        self.iode = 0
      if self.health is None:
        self.health = 0
      if self.age is None:
        self.age = 0
      if self.ura is None:
        self.ura = 0.
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.vel_z is None:
        self.vel_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.tau_n is None:
        self.tau_n = 0.
      if self.gamma is None:
        self.gamma = 0.
      if self.delta_tau_n is None:
        self.delta_tau_n = 0.
    else:
      self.sat = 0
      self.ttr = gnss_comm.msg.GnssTimeMsg()
      self.toe = gnss_comm.msg.GnssTimeMsg()
      self.freqo = 0
      self.iode = 0
      self.health = 0
      self.age = 0
      self.ura = 0.
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.vel_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.tau_n = 0.
      self.gamma = 0.
      self.delta_tau_n = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IdIdi3I13d().pack(_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      end = 0
      _x = self
      start = end
      end += 148
      (_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n,) = _get_struct_2IdIdi3I13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IdIdi3I13d().pack(_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      end = 0
      _x = self
      start = end
      end += 148
      (_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n,) = _get_struct_2IdIdi3I13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IdIdi3I13d = None
def _get_struct_2IdIdi3I13d():
    global _struct_2IdIdi3I13d
    if _struct_2IdIdi3I13d is None:
        _struct_2IdIdi3I13d = struct.Struct("<2IdIdi3I13d")
    return _struct_2IdIdi3I13d
