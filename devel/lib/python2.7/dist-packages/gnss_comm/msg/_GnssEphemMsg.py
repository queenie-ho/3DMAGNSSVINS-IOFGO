# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GnssEphemMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_comm.msg

class GnssEphemMsg(genpy.Message):
  _md5sum = "b4346f99e431c870e392a438684c0fe8"
  _type = "gnss_comm/GnssEphemMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message contains GPS, Galileo and BeiDou ephemeris data

uint32 sat
GnssTimeMsg ttr
GnssTimeMsg toe
GnssTimeMsg toc
float64 toe_tow
uint32 week
uint32 iode
uint32 iodc
uint32 health
uint32 code
float64 ura
float64 A
float64 e
float64 i0
float64 omg
float64 OMG0
float64 M0
float64 delta_n
float64 OMG_dot
float64 i_dot
float64 cuc
float64 cus
float64 crc
float64 crs
float64 cic
float64 cis
float64 af0
float64 af1
float64 af2
float64 tgd0
float64 tgd1
float64 A_dot
float64 n_dot
================================================================================
MSG: gnss_comm/GnssTimeMsg
# This message contains GNSS time expressed in the form of 
# GNSS week number and time of week(in seconds)

uint32 week
float64 tow"""
  __slots__ = ['sat','ttr','toe','toc','toe_tow','week','iode','iodc','health','code','ura','A','e','i0','omg','OMG0','M0','delta_n','OMG_dot','i_dot','cuc','cus','crc','crs','cic','cis','af0','af1','af2','tgd0','tgd1','A_dot','n_dot']
  _slot_types = ['uint32','gnss_comm/GnssTimeMsg','gnss_comm/GnssTimeMsg','gnss_comm/GnssTimeMsg','float64','uint32','uint32','uint32','uint32','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sat,ttr,toe,toc,toe_tow,week,iode,iodc,health,code,ura,A,e,i0,omg,OMG0,M0,delta_n,OMG_dot,i_dot,cuc,cus,crc,crs,cic,cis,af0,af1,af2,tgd0,tgd1,A_dot,n_dot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssEphemMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sat is None:
        self.sat = 0
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      if self.toc is None:
        self.toc = gnss_comm.msg.GnssTimeMsg()
      if self.toe_tow is None:
        self.toe_tow = 0.
      if self.week is None:
        self.week = 0
      if self.iode is None:
        self.iode = 0
      if self.iodc is None:
        self.iodc = 0
      if self.health is None:
        self.health = 0
      if self.code is None:
        self.code = 0
      if self.ura is None:
        self.ura = 0.
      if self.A is None:
        self.A = 0.
      if self.e is None:
        self.e = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.omg is None:
        self.omg = 0.
      if self.OMG0 is None:
        self.OMG0 = 0.
      if self.M0 is None:
        self.M0 = 0.
      if self.delta_n is None:
        self.delta_n = 0.
      if self.OMG_dot is None:
        self.OMG_dot = 0.
      if self.i_dot is None:
        self.i_dot = 0.
      if self.cuc is None:
        self.cuc = 0.
      if self.cus is None:
        self.cus = 0.
      if self.crc is None:
        self.crc = 0.
      if self.crs is None:
        self.crs = 0.
      if self.cic is None:
        self.cic = 0.
      if self.cis is None:
        self.cis = 0.
      if self.af0 is None:
        self.af0 = 0.
      if self.af1 is None:
        self.af1 = 0.
      if self.af2 is None:
        self.af2 = 0.
      if self.tgd0 is None:
        self.tgd0 = 0.
      if self.tgd1 is None:
        self.tgd1 = 0.
      if self.A_dot is None:
        self.A_dot = 0.
      if self.n_dot is None:
        self.n_dot = 0.
    else:
      self.sat = 0
      self.ttr = gnss_comm.msg.GnssTimeMsg()
      self.toe = gnss_comm.msg.GnssTimeMsg()
      self.toc = gnss_comm.msg.GnssTimeMsg()
      self.toe_tow = 0.
      self.week = 0
      self.iode = 0
      self.iodc = 0
      self.health = 0
      self.code = 0
      self.ura = 0.
      self.A = 0.
      self.e = 0.
      self.i0 = 0.
      self.omg = 0.
      self.OMG0 = 0.
      self.M0 = 0.
      self.delta_n = 0.
      self.OMG_dot = 0.
      self.i_dot = 0.
      self.cuc = 0.
      self.cus = 0.
      self.crc = 0.
      self.crs = 0.
      self.cic = 0.
      self.cis = 0.
      self.af0 = 0.
      self.af1 = 0.
      self.af2 = 0.
      self.tgd0 = 0.
      self.tgd1 = 0.
      self.A_dot = 0.
      self.n_dot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IdIdI2d5I23d().pack(_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.toc.week, _x.toc.tow, _x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      if self.toc is None:
        self.toc = gnss_comm.msg.GnssTimeMsg()
      end = 0
      _x = self
      start = end
      end += 252
      (_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.toc.week, _x.toc.tow, _x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot,) = _get_struct_2IdIdI2d5I23d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IdIdI2d5I23d().pack(_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.toc.week, _x.toc.tow, _x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ttr is None:
        self.ttr = gnss_comm.msg.GnssTimeMsg()
      if self.toe is None:
        self.toe = gnss_comm.msg.GnssTimeMsg()
      if self.toc is None:
        self.toc = gnss_comm.msg.GnssTimeMsg()
      end = 0
      _x = self
      start = end
      end += 252
      (_x.sat, _x.ttr.week, _x.ttr.tow, _x.toe.week, _x.toe.tow, _x.toc.week, _x.toc.tow, _x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot,) = _get_struct_2IdIdI2d5I23d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IdIdI2d5I23d = None
def _get_struct_2IdIdI2d5I23d():
    global _struct_2IdIdI2d5I23d
    if _struct_2IdIdI2d5I23d is None:
        _struct_2IdIdI2d5I23d = struct.Struct("<2IdIdI2d5I23d")
    return _struct_2IdIdI2d5I23d
