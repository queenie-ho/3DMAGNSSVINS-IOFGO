// Generated by gencpp from file gnss_comm/GnssSvsMsg.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSSVSMSG_H
#define GNSS_COMM_MESSAGE_GNSSSVSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssSvsMsg_
{
  typedef GnssSvsMsg_<ContainerAllocator> Type;

  GnssSvsMsg_()
    : header()
    , sat()
    , freqo()
    , health()
    , elev_degree()
    , az_degree()
    , sig_mask()  {
    }
  GnssSvsMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sat(_alloc)
    , freqo(_alloc)
    , health(_alloc)
    , elev_degree(_alloc)
    , az_degree(_alloc)
    , sig_mask(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _sat_type;
  _sat_type sat;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _freqo_type;
  _freqo_type freqo;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _health_type;
  _health_type health;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _elev_degree_type;
  _elev_degree_type elev_degree;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _az_degree_type;
  _az_degree_type az_degree;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _sig_mask_type;
  _sig_mask_type sig_mask;





  typedef boost::shared_ptr< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GnssSvsMsg_

typedef ::gnss_comm::GnssSvsMsg_<std::allocator<void> > GnssSvsMsg;

typedef boost::shared_ptr< ::gnss_comm::GnssSvsMsg > GnssSvsMsgPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssSvsMsg const> GnssSvsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssSvsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssSvsMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSvsMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sat == rhs.sat &&
    lhs.freqo == rhs.freqo &&
    lhs.health == rhs.health &&
    lhs.elev_degree == rhs.elev_degree &&
    lhs.az_degree == rhs.az_degree &&
    lhs.sig_mask == rhs.sig_mask;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssSvsMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSvsMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "610ee24e5811902378e70f98580c022c";
  }

  static const char* value(const ::gnss_comm::GnssSvsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x610ee24e58119023ULL;
  static const uint64_t static_value2 = 0x78e70f98580c022cULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssSvsMsg";
  }

  static const char* value(const ::gnss_comm::GnssSvsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32[]    sat\n"
"uint32[]    freqo\n"
"bool[]      health\n"
"float64[]   elev_degree\n"
"float64[]   az_degree\n"
"uint32[]    sig_mask\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gnss_comm::GnssSvsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sat);
      stream.next(m.freqo);
      stream.next(m.health);
      stream.next(m.elev_degree);
      stream.next(m.az_degree);
      stream.next(m.sig_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssSvsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssSvsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssSvsMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sat[]" << std::endl;
    for (size_t i = 0; i < v.sat.size(); ++i)
    {
      s << indent << "  sat[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.sat[i]);
    }
    s << indent << "freqo[]" << std::endl;
    for (size_t i = 0; i < v.freqo.size(); ++i)
    {
      s << indent << "  freqo[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.freqo[i]);
    }
    s << indent << "health[]" << std::endl;
    for (size_t i = 0; i < v.health.size(); ++i)
    {
      s << indent << "  health[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.health[i]);
    }
    s << indent << "elev_degree[]" << std::endl;
    for (size_t i = 0; i < v.elev_degree.size(); ++i)
    {
      s << indent << "  elev_degree[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.elev_degree[i]);
    }
    s << indent << "az_degree[]" << std::endl;
    for (size_t i = 0; i < v.az_degree.size(); ++i)
    {
      s << indent << "  az_degree[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.az_degree[i]);
    }
    s << indent << "sig_mask[]" << std::endl;
    for (size_t i = 0; i < v.sig_mask.size(); ++i)
    {
      s << indent << "  sig_mask[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.sig_mask[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSSVSMSG_H
