// Generated by gencpp from file gnss_comm/GnssMeasMsg.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSMEASMSG_H
#define GNSS_COMM_MESSAGE_GNSSMEASMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gnss_comm/GnssObsMsg.h>

namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssMeasMsg_
{
  typedef GnssMeasMsg_<ContainerAllocator> Type;

  GnssMeasMsg_()
    : meas()  {
    }
  GnssMeasMsg_(const ContainerAllocator& _alloc)
    : meas(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::gnss_comm::GnssObsMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gnss_comm::GnssObsMsg_<ContainerAllocator> >::other >  _meas_type;
  _meas_type meas;





  typedef boost::shared_ptr< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GnssMeasMsg_

typedef ::gnss_comm::GnssMeasMsg_<std::allocator<void> > GnssMeasMsg;

typedef boost::shared_ptr< ::gnss_comm::GnssMeasMsg > GnssMeasMsgPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssMeasMsg const> GnssMeasMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssMeasMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssMeasMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssMeasMsg_<ContainerAllocator2> & rhs)
{
  return lhs.meas == rhs.meas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssMeasMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssMeasMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eafeb530a3e6637722c4e296734c119";
  }

  static const char* value(const ::gnss_comm::GnssMeasMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eafeb530a3e6637ULL;
  static const uint64_t static_value2 = 0x722c4e296734c119ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssMeasMsg";
  }

  static const char* value(const ::gnss_comm::GnssMeasMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains one-epoch measurements from multiple satellites\n"
"\n"
"GnssObsMsg[] meas\n"
"================================================================================\n"
"MSG: gnss_comm/GnssObsMsg\n"
"# This message contains one-epoch measurements from one single satellite\n"
"\n"
"GnssTimeMsg time    # measurement time\n"
"uint32 sat          # satellite ID (define by `sat_no` function in `gnss_utility.hpp`)\n"
"float64[] freqs     # observed frequencies [Hz]\n"
"float64[] CN0       # carrier-to-noise density ratio (signal strength) [dB-Hz]\n"
"uint8[] LLI         # lost-lock indicator (1=lost)\n"
"uint8[] code        # channel code\n"
"float64[] psr       # pseudorange measurement [m]\n"
"float64[] psr_std   # pseudorange standard deviation [m]\n"
"float64[] cp        # carrier phase measurement [cycle]\n"
"float64[] cp_std    # carrier phase standard deviation [cycle]\n"
"float64[] dopp      # Doppler measurement [Hz]\n"
"float64[] dopp_std  # Doppler standard deviation [Hz]\n"
"# tracking status. bit_0:psr valid, bit_1:cp valid, \n"
"# bit_2:half cp valid, bit_3:half cp subtracted\n"
"uint8[]   status    \n"
"================================================================================\n"
"MSG: gnss_comm/GnssTimeMsg\n"
"# This message contains GNSS time expressed in the form of \n"
"# GNSS week number and time of week(in seconds)\n"
"\n"
"uint32 week\n"
"float64 tow\n"
;
  }

  static const char* value(const ::gnss_comm::GnssMeasMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.meas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssMeasMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssMeasMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssMeasMsg_<ContainerAllocator>& v)
  {
    s << indent << "meas[]" << std::endl;
    for (size_t i = 0; i < v.meas.size(); ++i)
    {
      s << indent << "  meas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gnss_comm::GnssObsMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.meas[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSMEASMSG_H
