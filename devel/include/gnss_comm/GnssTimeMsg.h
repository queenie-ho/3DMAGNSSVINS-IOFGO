// Generated by gencpp from file gnss_comm/GnssTimeMsg.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSTIMEMSG_H
#define GNSS_COMM_MESSAGE_GNSSTIMEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssTimeMsg_
{
  typedef GnssTimeMsg_<ContainerAllocator> Type;

  GnssTimeMsg_()
    : week(0)
    , tow(0.0)  {
    }
  GnssTimeMsg_(const ContainerAllocator& _alloc)
    : week(0)
    , tow(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _week_type;
  _week_type week;

   typedef double _tow_type;
  _tow_type tow;





  typedef boost::shared_ptr< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GnssTimeMsg_

typedef ::gnss_comm::GnssTimeMsg_<std::allocator<void> > GnssTimeMsg;

typedef boost::shared_ptr< ::gnss_comm::GnssTimeMsg > GnssTimeMsgPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssTimeMsg const> GnssTimeMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssTimeMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssTimeMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssTimeMsg_<ContainerAllocator2> & rhs)
{
  return lhs.week == rhs.week &&
    lhs.tow == rhs.tow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssTimeMsg_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssTimeMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf90d33163be4f350369edc1830837b4";
  }

  static const char* value(const ::gnss_comm::GnssTimeMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf90d33163be4f35ULL;
  static const uint64_t static_value2 = 0x0369edc1830837b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssTimeMsg";
  }

  static const char* value(const ::gnss_comm::GnssTimeMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains GNSS time expressed in the form of \n"
"# GNSS week number and time of week(in seconds)\n"
"\n"
"uint32 week\n"
"float64 tow\n"
;
  }

  static const char* value(const ::gnss_comm::GnssTimeMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.week);
      stream.next(m.tow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssTimeMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssTimeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssTimeMsg_<ContainerAllocator>& v)
  {
    s << indent << "week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week);
    s << indent << "tow: ";
    Printer<double>::stream(s, indent + "  ", v.tow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSTIMEMSG_H
